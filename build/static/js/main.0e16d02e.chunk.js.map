{"version":3,"sources":["utils/util.js","components/CutResult.jsx","components/JigsawCut.jsx","components/App.jsx","index.js","components/example.jpg"],"names":["loadImageAsync","_x","_loadImageAsync","apply","this","arguments","_callee","src","regenerator_default","a","wrap","_context","prev","next","abrupt","Promise","r","img","Image","onload","stop","cloneCanvas","canvas","c","document","createElement","width","height","getContext","drawImage","parseIntWithDefault","v","defaultV","length","undefined","parseInt","isNaN","STYLES","container","marginTop","borderTop","CutResult","state","imgs","allSrc","_handleRefContainer","e","_this","_elContainer","_cut","_handleClickDownloadAll","_assertThisInitialize","_assertThisInitialize2","zip","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_ref3","i","j","Object","assertThisInitialized","JSZip","file","slice","base64","Symbol","iterator","done","value","concat","t0","return","finish","t1","saveAs","generateAsync","type","t2","sent","_this$props$cutData","props","cutData","pieceSize","pieceRowCount","pieceColumnCount","react_default","style","ref","onClick","position","margin","map","_ref4","top","left","size","key","alt","lineWidth","strokeStyle","_getImgCanvas","imgCanvas","ctx","unitCanvas","Math","ceil","unitCtx","dSize","clearRect","save","beginPath","moveTo","_jigsawHTLineTo","_jigsawHBLineTo","lineTo","_jigsawVLLineTo","_jigsawVRLineTo","closePath","clip","stroke","restore","push","toDataURL","setState","imgSrc","bezierCurveTo","transform","_jigsawLineTo","x","y","toConsumableArray","cp1x","cp1y","cp2x","cp2y","reversed","ratio","dx","dy","_jigsawLineToWithTransform","Component","minWidth","JigsawCut","IMAGE_EXAMPLE","_handleClickCut","_handleChangeFile","_ref","files","target","fd","FileReader","result","readAsDataURL","_handleChangePieceSize","_ref2","_handleChangePieceRowCount","_handleChangePieceColumnCount","_handleChangeLineWidth","_ref5","_handleChangeStrokeStyle","_ref6","_this$state","accept","onChange","CutResult_CutResult","JSON","stringify","App","JigsawCut_JigsawCut","ReactDOM","render","App_App","getElementById","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.0e16d02e.chunk.js","sourcesContent":["export async function loadImageAsync(src) {\n    return new Promise(r => {\n        const img = new Image()\n        img.onload = () => r(img)\n        img.src = src\n    })\n}\n\nexport function cloneCanvas(canvas) {\n    const c = document.createElement('canvas')\n    c.width = canvas.width\n    c.height = canvas.height\n    const ctx = c.getContext('2d')\n    ctx.drawImage(canvas, 0, 0)\n    return c\n}\n\nexport function parseIntWithDefault(v, defaultV = -1) {\n    v = parseInt(v)\n    if (isNaN(v)) v = defaultV\n    return v\n}","import React, { Component } from 'react'\nimport JSZip from 'jszip'\nimport saveAs from 'file-saver'\n\nimport { loadImageAsync, cloneCanvas } from '../utils/util'\n\nconst STYLES = {\n    container: {\n        marginTop: 20,\n        borderTop: '1px solid',\n    },\n}\n\nexport default class CutResult extends Component {\n    _elContainer\n\n    state = {\n        imgs: [],\n        allSrc: '',\n    }\n\n    render() {\n        const {\n            props: {\n                cutData: {\n                    pieceSize,\n                    pieceRowCount,\n                    pieceColumnCount,\n                },\n            },\n            state: {\n                imgs,\n            },\n        } = this\n        \n        return (\n            <div\n                style={STYLES.container}\n\n                ref={this._handleRefContainer}\n            >\n                <button\n                    onClick={this._handleClickDownloadAll}\n                >\n                    下载所有\n                </button>\n                <div\n                    style={{\n                        position: 'relative',\n                        width: pieceColumnCount * pieceSize,\n                        height: pieceRowCount * pieceSize,\n                        margin: 200,\n                    }}\n                >\n                    {\n                        imgs.map(\n                            (\n                                {\n                                    top,\n                                    left,\n                                    size,\n                                    src,\n                                },\n                                i,\n                            ) => (\n                                <img\n                                    key={i}\n                                    src={src}\n                                    alt={i}\n                                    style={{\n                                        position: 'absolute',\n                                        top,\n                                        left,\n                                        width: size,\n                                        height: size,\n                                    }}\n                                />\n                            )\n                        )\n                    }\n                </div>\n            </div>\n        )\n    }\n\n    _handleRefContainer = e => {\n        if (!e || this._elContainer === e) return\n        this._elContainer = e\n\n        this._cut()\n    }\n\n    async _cut() {\n        const {\n            props: {\n                cutData: {\n                    pieceSize,\n                    pieceRowCount,\n                    pieceColumnCount,\n                    lineWidth,\n                    strokeStyle,\n                },\n            },\n        } = this\n        const imgCanvas = await this._getImgCanvas()\n        const canvas = cloneCanvas(imgCanvas)\n        const ctx = canvas.getContext('2d')\n        const unitCanvas = document.createElement('canvas')\n        unitCanvas.width = unitCanvas.height = Math.ceil(pieceSize * 1.64)\n        const unitCtx = unitCanvas.getContext('2d')\n        const dSize = (unitCanvas.width - pieceSize) / 2\n        const imgs = []\n\n        ctx.lineWidth = lineWidth\n        ctx.strokeStyle = strokeStyle\n\n        for (let i = 0; i < pieceColumnCount; i++) {\n            for (let j = 0; j < pieceRowCount; j++) {\n                ctx.clearRect(0, 0, canvas.width, canvas.height)\n                ctx.save()\n                ctx.beginPath()\n\n                if (j) {\n                    ctx.moveTo(i * pieceSize, j * pieceSize)\n                    if ((i + j) & 1) this._jigsawHTLineTo(ctx, i + 1, j)\n                    else this._jigsawHBLineTo(ctx, i + 1, j)\n                } else {\n                    ctx.moveTo(i * pieceSize, j * pieceSize - lineWidth * 2)\n                    ctx.lineTo((i + 1) * pieceSize, j * pieceSize - lineWidth * 2)\n                }\n                if (i < pieceColumnCount - 1) {\n                    if ((i + j) & 1) this._jigsawVLLineTo(ctx, i + 1, j + 1)\n                    else this._jigsawVRLineTo(ctx, i + 1, j + 1)\n                } else {\n                    ctx.lineTo((i + 1) * pieceSize + lineWidth * 2, j * pieceSize)\n                    ctx.lineTo((i + 1) * pieceSize + lineWidth * 2, (j + 1) * pieceSize)\n                }\n                if (j < pieceRowCount - 1) {\n                    if ((i + j) & 1) this._jigsawHBLineTo(ctx, i + 1, j + 1, true)\n                    else this._jigsawHTLineTo(ctx, i + 1, j + 1, true)\n                } else {\n                    ctx.lineTo((i + 1) * pieceSize, (j + 1) * pieceSize + lineWidth * 2)\n                    ctx.lineTo(i * pieceSize, (j + 1) * pieceSize + lineWidth * 2)\n                }\n                if (i) {\n                    if ((i + j) & 1) this._jigsawVRLineTo(ctx, i, j + 1, true)\n                    else this._jigsawVLLineTo(ctx, i, j + 1, true)\n                } else {\n                    ctx.lineTo(i * pieceSize - lineWidth * 2, (j + 1) * pieceSize)\n                    ctx.lineTo(i * pieceSize - lineWidth * 2, j * pieceSize)\n                }\n\n                ctx.closePath()\n                ctx.clip()\n                ctx.drawImage(imgCanvas, 0, 0)\n                ctx.stroke()\n                ctx.restore()\n\n                unitCtx.clearRect(0, 0, unitCanvas.width, unitCanvas.height)\n                unitCtx.drawImage(canvas, i * pieceSize - dSize, j * pieceSize - dSize, unitCanvas.width, unitCanvas.height, 0, 0, unitCanvas.width, unitCanvas.height)\n                imgs.push({\n                    i,\n                    j,\n                    top: j * pieceSize - dSize,\n                    left: i * pieceSize - dSize,\n                    size: unitCanvas.width,\n                    src: unitCanvas.toDataURL('image/png'),\n                })\n            }\n        }\n\n        this.setState({\n            imgs,\n            allSrc: imgCanvas.toDataURL('image/png'),\n        })\n    }\n\n    async _getImgCanvas() {\n        const {\n            props: {\n                cutData: {\n                    imgSrc,\n                    pieceSize,\n                    pieceRowCount,\n                    pieceColumnCount,\n                },\n            },\n        } = this\n\n        const img = await loadImageAsync(imgSrc)\n        const imgCanvas = document.createElement('canvas')\n        imgCanvas.width = pieceSize * pieceColumnCount\n        imgCanvas.height = pieceSize * pieceRowCount\n        const ctx = imgCanvas.getContext('2d')\n        ctx.drawImage(img, 0, 0, imgCanvas.width, imgCanvas.height)\n        \n        // this._elContainer.appendChild(imgCanvas)\n\n        return imgCanvas\n    }\n\n    _jigsawLineTo(lineTo, bezierCurveTo) {\n        lineTo(76, 0)\n        bezierCurveTo(84.6, 0, 91.7, 7, 91.7, 15.7)\n        lineTo(91.7, 17.3)\n        bezierCurveTo(91.7, 21.2, 90.7, 24.9, 88.9, 28.4)\n        bezierCurveTo(86.5, 33.3, 85.4, 39, 86.3, 45.1)\n        bezierCurveTo(88.2, 57.5, 98.4, 67.3, 110.9, 68.6)\n        bezierCurveTo(127.8, 70.4, 142, 57.3, 142, 40.8)\n        bezierCurveTo(142, 36.4, 141, 32.2, 139.1, 28.5)\n        bezierCurveTo(137.4, 25, 136.3, 21.3, 136.3, 17.4)\n        lineTo(136.3, 15.8)\n        bezierCurveTo(136.3, 7.2, 143.3, 0, 152, 0)\n        lineTo(228, 0)\n    }\n\n    _jigsawLineToWithTransform(ctx, transform) {\n        return this._jigsawLineTo(\n            (x, y) => ctx.lineTo(...transform(x, y)),\n            (cp1x, cp1y, cp2x, cp2y, x, y) => ctx.bezierCurveTo(\n                ...transform(cp1x, cp1y),\n                ...transform(cp2x, cp2y),\n                ...transform(x, y),\n            ),\n        )\n    }\n\n    _jigsawHTLineTo(ctx, i, j, reversed = false) {\n        const {\n            props: {\n                cutData: {\n                    pieceSize,\n                },\n            },\n        } = this\n        const ratio = pieceSize / 228\n        const dx = (i - 1) * pieceSize\n        const dy = j * pieceSize\n\n        this._jigsawLineToWithTransform(\n            ctx,\n            (\n                reversed\n                    ? (x, y) => [pieceSize - x * ratio + dx, -y * ratio + dy]\n                    : (x, y) => [x * ratio + dx, -y * ratio + dy]\n            ),\n        )\n    }\n\n    _jigsawVRLineTo(ctx, i, j, reversed = false) {\n        const {\n            props: {\n                cutData: {\n                    pieceSize,\n                },\n            },\n        } = this\n        const ratio = pieceSize / 228\n        let dx = i * pieceSize\n        let dy = (j - 1) * pieceSize\n\n        this._jigsawLineToWithTransform(\n            ctx,\n            (\n                reversed\n                    ? (x, y) => [y * ratio + dx, pieceSize - x * ratio + dy]\n                    : (x, y) => [y * ratio + dx, x * ratio + dy]\n            ),\n        )\n    }\n\n    _jigsawHBLineTo(ctx, i, j, reversed = false) {\n        const {\n            props: {\n                cutData: {\n                    pieceSize,\n                },\n            },\n        } = this\n        const ratio = pieceSize / 228\n        let dx = (i - 1) * pieceSize\n        let dy = j * pieceSize\n\n        this._jigsawLineToWithTransform(\n            ctx,\n            (\n                reversed\n                    ? (x, y) => [pieceSize - x * ratio + dx, y * ratio + dy]\n                    : (x, y) => [x * ratio + dx, y * ratio + dy]\n            ),\n        )\n    }\n\n    _jigsawVLLineTo(ctx, i, j, reversed = false) {\n        const {\n            props: {\n                cutData: {\n                    pieceSize,\n                },\n            },\n        } = this\n        const ratio = pieceSize / 228\n        let dx = i * pieceSize\n        let dy = (j - 1) * pieceSize\n\n        this._jigsawLineToWithTransform(\n            ctx,\n            (\n                reversed\n                    ? (x, y) => [-y * ratio + dx, pieceSize - x * ratio + dy]\n                    : (x, y) => [-y * ratio + dx, x * ratio + dy]\n            ),\n        )\n    }\n\n    _handleClickDownloadAll = async () => {\n        const {\n            state: {\n                imgs,\n                allSrc,\n            },\n        } = this\n\n        const zip = new JSZip()\n        zip.file('all.png', allSrc.slice('data:image/png;base64,'.length), { base64: true })\n        for (const {\n            i,\n            j,\n            src,\n        } of imgs) zip.file(`${j}-${i}.png`, src.slice('data:image/png;base64,'.length), { base64: true })\n        saveAs(await zip.generateAsync({ type: 'blob' }), '拼图')\n    }\n}\n","import React, { Component } from 'react'\n\nimport CutResult from './CutResult'\nimport IMAGE_EXAMPLE from './example.jpg'\nimport { parseIntWithDefault } from '../utils/util';\n\nconst STYLES = {\n    img: {\n        minWidth: 100,\n    },\n}\n\nexport default class JigsawCut extends Component {\n    state = {\n        imgSrc: IMAGE_EXAMPLE,\n        pieceSize: 200,\n        pieceRowCount: 2,\n        pieceColumnCount: 3,\n        lineWidth: 3,\n        strokeStyle: 'rgba(0, 0, 0, 0.35)',\n\n        // cutData: null,\n        cutData: {\n            imgSrc: IMAGE_EXAMPLE,\n            pieceSize: 200,\n            pieceRowCount: 2,\n            pieceColumnCount: 3,\n            lineWidth: 3,\n            strokeStyle: 'rgba(0, 0, 0, 0.35)',\n        },\n    }\n    \n    render() {\n        const {\n            state: {\n                imgSrc,\n                pieceSize,\n                pieceRowCount,\n                pieceColumnCount,\n                lineWidth,\n                strokeStyle,\n                cutData,\n            },\n        } = this\n\n        return (\n            <section>\n                <h1>\n                    拼图切图\n                </h1>\n                <div>\n                    要切的图片：\n                    <img\n                        src={imgSrc}\n                        alt=\"图片\"\n                        style={STYLES.img}\n                    />\n                    <input\n                        type=\"file\"\n                        accept=\"image/*\"\n\n                        onChange={this._handleChangeFile}\n                    />\n                </div>\n                <div>\n                    每一片的大小：\n                    <input\n                        type=\"number\"\n                        value={`${pieceSize}`}\n\n                        onChange={this._handleChangePieceSize}\n                    />\n                </div>\n                <div>\n                    行数：\n                    <input\n                        type=\"number\"\n                        value={`${pieceRowCount}`}\n\n                        onChange={this._handleChangePieceRowCount}\n                    />\n                </div>\n                <div>\n                    列数：\n                    <input\n                        type=\"number\"\n                        value={`${pieceColumnCount}`}\n\n                        onChange={this._handleChangePieceColumnCount}\n                    />\n                </div>\n                <div>\n                    线宽：\n                    <input\n                        type=\"number\"\n                        value={`${lineWidth}`}\n\n                        onChange={this._handleChangeLineWidth}\n                    />\n                </div>\n                <div>\n                    线的颜色：\n                    <input\n                        value={`${strokeStyle}`}\n\n                        onChange={this._handleChangeStrokeStyle}\n                    />\n                </div>\n                <div>\n                    <button\n                        onClick={this._handleClickCut}\n                    >\n                        切一切\n                    </button>\n                </div>\n                {\n                    cutData && (\n                        <CutResult\n                            key={JSON.stringify(cutData)}\n                            cutData={cutData}\n                        />\n                    )\n                }\n            </section>\n        )\n    }\n\n    _handleClickCut = () => {\n        let {\n            state: {\n                imgSrc,\n                pieceSize,\n                pieceRowCount,\n                pieceColumnCount,\n                lineWidth,\n                strokeStyle,\n            },\n        } = this\n\n        pieceSize = parseIntWithDefault(pieceSize, 0)\n        pieceRowCount = parseIntWithDefault(pieceRowCount, 0)\n        pieceColumnCount = parseIntWithDefault(pieceColumnCount, 0)\n        lineWidth = parseIntWithDefault(lineWidth, 0)\n\n        this.setState({\n            pieceSize,\n            pieceRowCount,\n            pieceColumnCount,\n            lineWidth,\n            cutData: {\n                imgSrc,\n                pieceSize,\n                pieceRowCount,\n                pieceColumnCount,\n                lineWidth,\n                strokeStyle,\n            },\n        })\n    }\n\n    _handleChangeFile = (\n        {\n            target: {\n                files,\n            },\n        },\n    ) => {\n        const fd = new FileReader()\n        fd.onload = () => {\n            this.setState({\n                imgSrc: fd.result,\n            })\n        }\n        fd.readAsDataURL(files[0])\n    }\n\n    _handleChangePieceSize = (\n        {\n            target: {\n                value,\n            },\n        },\n    ) => {\n        this.setState({\n            pieceSize: value,\n        })\n    }\n\n    _handleChangePieceRowCount = (\n        {\n            target: {\n                value,\n            },\n        },\n    ) => {\n        this.setState({\n            pieceRowCount: value,\n        })\n    }\n\n    _handleChangePieceColumnCount = (\n        {\n            target: {\n                value,\n            },\n        },\n    ) => {\n        this.setState({\n            pieceColumnCount: value,\n        })\n    }\n\n    _handleChangeLineWidth = (\n        {\n            target: {\n                value,\n            },\n        },\n    ) => {\n        this.setState({\n            lineWidth: value,\n        })\n    }\n\n    _handleChangeStrokeStyle = (\n        {\n            target: {\n                value,\n            },\n        },\n    ) => {\n        this.setState({\n            strokeStyle: value,\n        })\n    }\n}\n","import React, { Component } from 'react'\n\nimport JigsawCut from './JigsawCut'\n\nexport default class App extends Component {\n    render() {\n        return (\n            <JigsawCut/>\n        )\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './components/App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n","module.exports = __webpack_public_path__ + \"static/media/example.bca1d26f.jpg\";"],"sourceRoot":""}